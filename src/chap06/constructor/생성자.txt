<<생성자>>
생성자는 메소드이다. 
객체가 생성될 때 호출되는 특별한 메소드이며 주로 자원에 관련된 작업을 수행하거나
객체가 가지고 있는 멤버변수를 초기화하는 작업을 생성자메소드 안에서 처리한다.

[객체생성]
클래스타입 변수 = new 생성자메소드()
------		   ---------
   ^    			 ^
   |_사용할 클래스		 |_클래스 안에 미리 정의되어 있는 생성자 메소드를 호출
   					      생성자 메소드도 일반 메소드처럼 외부에서 값을 입력 받아 실행해야 하는 경우가
   					      있으므로 일반 메소드처럼 ()안에 데이터 타입과 함께 변수를 정의하여 사용한다.
   
생성자메소드는 일반메소드와 다르게 객체가 생성될때 한 번만 호출되는 메소드이므로 new연산자가
생성자메소드를 호출하면서 생성자 메소드를 통해서 메모리에 할당할 클래스가 어떤 클래스인지 파악하고 호출해야 하므로
생성자메소드를 정의할 때 규칙이 존재한다.
생성자메소드에서는 주로 객체가 생성될 때 필요한 로직을 수행하며(db연결, 네트워크 접속, 파일오픈...)
주로 생성자에서는 객체가 갖고 있는 멤버변수를 초기화하는 코드를 정의하는 것이 일반적이다.

[규칙]
1. 생성자 메소드명은 클래스명과 대소문자까지 동일하게 정의한다.
2. 일반메소드와 동일하게 매개변수를 통해서 외부에서 값을 입력받아 사용할 수 있다.
3. 일반메소드처럼 생성자 메소드도 메소드 오버로딩이 가능하다.
   => 매개변수 갯수나 타입을 다르게하면 생성자 메소드를 여러개 정의할 수 있다.
4. 생성자 메소드를 정의하지 않으면 컴파일러가 자동으로 매개변수 없는 기본 생성자를 컴파일 하면서 추가한다.
5. 생성자 메소드를 정의할때 리턴타입을 명시하지 않는다. (void조차 명시하지 않는다.)
6. 생성자 메소드가 한 개 이상 정의되면 컴파일러는 기본생성자를 자동으로 만들어주지 않는다.
   => 기본생성자는 자바 프레임워크에서 기본으로 호출되어 지는 경우가 많으므로 작업할 내용이 없어도 기본생성자는
  	    항상 정의해야 한다.
7. 생성자 메소드가 오버로딩되어 있는 경우 자신의 생성자를 호출할 수 있다.
       생성자 메소드 안에서 또 다른 생성자 메소드를 호출할 수 있다.
   [문법]
   this(매개변수1, 매개변수2...)
   => 반드시 생성자를 호출하는 명령문은 생성자메소드의 첫 번째 문장에 정의해야 한다.


